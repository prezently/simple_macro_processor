#!/usr/bin/env ruby

puts __FILE__
require 'lib/simple_macro_processor'

# TODO use proper opts passing
variable_file    = ARGV[0]
source_file      = ARGV[1]
destination_file = ARGV[2]

puts "args: #{variable_file} - #{source_file} - #{destination_file}"

# TODO include library to allow access to the #blank? method
#if variable_file.blank? || source_file.blank? || destination_file.blank?
if variable_file.nil? || source_file.nil? || destination_file.nil?
  puts "Must provide three arguments: variable file, source file, destination file"
  exit(0)
end

# TODO set these values through opts
force_overwrite = false
silent = false

if File.exists?(destination_file) && !force_overwrite
  puts "Destination file will be overwrite existing file. Okay?\n"
  print "[yN]: "
  # TODO why isn't this working?
  # response = gets
  response = "y"
  if response.chomp != 'y'
    puts "\nexiting..."
    exit(0)
  else
    puts ""
  end
end

t0 = Time.now
coordinator = SimpleMacroProcessor::Coordinator.new(variable_file,
                                                    source_file,
                                                    destination_file)

coordinator.process
t1 = Time.now

if !silent
  time_elapsed = t1 - t0
  stats = coordinator.stats
  puts "Time to process\t#{time_elapsed}s"
  puts "Lines Processed\t#{stats[:num_lines_processed]}"
  if !stats[:unused_variables].empty?
    puts "Unused Variables\t#{stats[:unused_variables].to_a.join(', ')}"
  end
  if !stats[:missing_variables].empty?
    puts "Missing Variables\t#{stats[:missing_variables].to_a.join(', ')}"
  end
end
